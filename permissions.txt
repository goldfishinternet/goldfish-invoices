https://laravel-news.com/laravel-gates-policies-guards-explained

Gate is the same as Permission

What are the typical actions we need to perform with permissions?

    Define the permission, ex. "manage_users"
    Check the permission on the front-end, ex. show/hide the button
    Check the permission on the back-end, ex. can/can't update the data


Example...
app/Providers/AppServiceProvider.php:

use App\Models\User;
use Illuminate\Support\Facades\Gate;

class AppServiceProvider extends ServiceProvider
{
    public function boot()
    {
    	// Should return TRUE or FALSE
        Gate::define('manage_users', function(User $user) {
            return $user->is_admin == 1;
        });
    }
}

or

@can('manage_users')
<li>
    <a href="{{ route('users.index') }}">Users</a>
</li>
@endcan

routes/web.php:
Route::resource('users', UserController::class)->middleware('can:manage_users');

Policy: Model-Based Set of Permissions
If your permissions can be assigned to an Eloquent model, in a typical CRUD Controller, you can build a Policy class around them.

php artisan make:policy ProductPolicy --model=Product

app/Policies/UserPolicy.php

use App\Models\Product;
use App\Models\User;

class ProductPolicy
{
    use HandlesAuthorization;
    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user)
    {
        //
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, Product $product)
    {
        //
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user)
    {
        //
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update(User $user, Product $product)
    {
        //
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, Product $product)
    {
        //
    }

    /**
     * Determine whether the user can restore the model.
     */
    public function restore(User $user, Product $product)
    {
        //
    }

    /**
     * Determine whether the user can permanently delete the model.
     */
    public function forceDelete(User $user, Product $product)
    {
        //
    }
}

In each of those methods, you define the condition for the true/false return.
So, if we follow the same examples as Gates before, we can do this:
class ProductPolicy
{
    public function create(User $user)
    {
        return $user->is_admin == 1;
    }

Then, you can check the Policy in a very similar way as Gates:
public function store(Request $request)
{
    $this->authorize('create', Product::class);
}

Role: Universal Set of Permissions

























